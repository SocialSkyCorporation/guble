// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/smancke/guble/server/connector (interfaces: Subscriber)

package apns

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	connector "github.com/smancke/guble/server/connector"
	router "github.com/smancke/guble/server/router"
)

// Mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockSubscriberRecorder
}

// Recorder for MockSubscriber (not exported)
type _MockSubscriberRecorder struct {
	mock *MockSubscriber
}

func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &_MockSubscriberRecorder{mock}
	return mock
}

func (_m *MockSubscriber) EXPECT() *_MockSubscriberRecorder {
	return _m.recorder
}

func (_m *MockSubscriber) Cancel() {
	_m.ctrl.Call(_m, "Cancel")
}

func (_mr *_MockSubscriberRecorder) Cancel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel")
}

func (_m *MockSubscriber) Encode() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encode")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSubscriberRecorder) Encode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode")
}

func (_m *MockSubscriber) Filter(_param0 map[string]string) bool {
	ret := _m.ctrl.Call(_m, "Filter", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Filter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Filter", arg0)
}

func (_m *MockSubscriber) Key() string {
	ret := _m.ctrl.Call(_m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Key() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Key")
}

func (_m *MockSubscriber) Loop(_param0 context.Context, _param1 connector.Queue) error {
	ret := _m.ctrl.Call(_m, "Loop", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Loop(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Loop", arg0, arg1)
}

func (_m *MockSubscriber) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

func (_m *MockSubscriber) Route() *router.Route {
	ret := _m.ctrl.Call(_m, "Route")
	ret0, _ := ret[0].(*router.Route)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Route() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Route")
}

func (_m *MockSubscriber) SetLastID(_param0 uint64) error {
	ret := _m.ctrl.Call(_m, "SetLastID", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscriberRecorder) SetLastID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLastID", arg0)
}
