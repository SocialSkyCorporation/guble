// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/smancke/guble/server (interfaces: PubSubSource,MessageSink,WSConnection,Startable,Stopable,SetMessageEntry,Endpoint)

package server

import (
	gomock "github.com/golang/mock/gomock"
	guble "github.com/smancke/guble/guble"
	
	auth "github.com/smancke/guble/server/auth"
	store "github.com/smancke/guble/store"
	http "net/http"
)

// Mock of PubSubSource interface
type MockPubSubSource struct {
	ctrl     *gomock.Controller
	recorder *_MockPubSubSourceRecorder
}

// Recorder for MockPubSubSource (not exported)
type _MockPubSubSourceRecorder struct {
	mock *MockPubSubSource
}

func NewMockPubSubSource(ctrl *gomock.Controller) *MockPubSubSource {
	mock := &MockPubSubSource{ctrl: ctrl}
	mock.recorder = &_MockPubSubSourceRecorder{mock}
	return mock
}

func (_m *MockPubSubSource) EXPECT() *_MockPubSubSourceRecorder {
	return _m.recorder
}

func (_m *MockPubSubSource) AccessManager() (auth.AccessManager, error) {
	ret := _m.ctrl.Call(_m, "AccessManager")
	ret0, _ := ret[0].(auth.AccessManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPubSubSourceRecorder) AccessManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AccessManager")
}

func (_m *MockPubSubSource) KVStore() (store.KVStore, error) {
	ret := _m.ctrl.Call(_m, "KVStore")
	ret0, _ := ret[0].(store.KVStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPubSubSourceRecorder) KVStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KVStore")
}

func (_m *MockPubSubSource) MessageStore() (store.MessageStore, error) {
	ret := _m.ctrl.Call(_m, "MessageStore")
	ret0, _ := ret[0].(store.MessageStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPubSubSourceRecorder) MessageStore() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MessageStore")
}

func (_m *MockPubSubSource) Subscribe(_param0 *Route) (*Route, error) {
	ret := _m.ctrl.Call(_m, "Subscribe", _param0)
	ret0, _ := ret[0].(*Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPubSubSourceRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0)
}

func (_m *MockPubSubSource) Unsubscribe(_param0 *Route) {
	_m.ctrl.Call(_m, "Unsubscribe", _param0)
}

func (_mr *_MockPubSubSourceRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unsubscribe", arg0)
}

// Mock of MessageSink interface
type MockMessageSink struct {
	ctrl     *gomock.Controller
	recorder *_MockMessageSinkRecorder
}

// Recorder for MockMessageSink (not exported)
type _MockMessageSinkRecorder struct {
	mock *MockMessageSink
}

func NewMockMessageSink(ctrl *gomock.Controller) *MockMessageSink {
	mock := &MockMessageSink{ctrl: ctrl}
	mock.recorder = &_MockMessageSinkRecorder{mock}
	return mock
}

func (_m *MockMessageSink) EXPECT() *_MockMessageSinkRecorder {
	return _m.recorder
}

func (_m *MockMessageSink) HandleMessage(_param0 *guble.Message) error {
	ret := _m.ctrl.Call(_m, "HandleMessage", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMessageSinkRecorder) HandleMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleMessage", arg0)
}

// Mock of WSConnection interface
type MockWSConnection struct {
	ctrl     *gomock.Controller
	recorder *_MockWSConnectionRecorder
}

// Recorder for MockWSConnection (not exported)
type _MockWSConnectionRecorder struct {
	mock *MockWSConnection
}

func NewMockWSConnection(ctrl *gomock.Controller) *MockWSConnection {
	mock := &MockWSConnection{ctrl: ctrl}
	mock.recorder = &_MockWSConnectionRecorder{mock}
	return mock
}

func (_m *MockWSConnection) EXPECT() *_MockWSConnectionRecorder {
	return _m.recorder
}

func (_m *MockWSConnection) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockWSConnectionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockWSConnection) Receive(_param0 *[]byte) error {
	ret := _m.ctrl.Call(_m, "Receive", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWSConnectionRecorder) Receive(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Receive", arg0)
}

func (_m *MockWSConnection) Send(_param0 []byte) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockWSConnectionRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}

// Mock of Startable interface
type MockStartable struct {
	ctrl     *gomock.Controller
	recorder *_MockStartableRecorder
}

// Recorder for MockStartable (not exported)
type _MockStartableRecorder struct {
	mock *MockStartable
}

func NewMockStartable(ctrl *gomock.Controller) *MockStartable {
	mock := &MockStartable{ctrl: ctrl}
	mock.recorder = &_MockStartableRecorder{mock}
	return mock
}

func (_m *MockStartable) EXPECT() *_MockStartableRecorder {
	return _m.recorder
}

func (_m *MockStartable) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStartableRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

// Mock of Stopable interface
type MockStopable struct {
	ctrl     *gomock.Controller
	recorder *_MockStopableRecorder
}

// Recorder for MockStopable (not exported)
type _MockStopableRecorder struct {
	mock *MockStopable
}

func NewMockStopable(ctrl *gomock.Controller) *MockStopable {
	mock := &MockStopable{ctrl: ctrl}
	mock.recorder = &_MockStopableRecorder{mock}
	return mock
}

func (_m *MockStopable) EXPECT() *_MockStopableRecorder {
	return _m.recorder
}

func (_m *MockStopable) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStopableRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

// Mock of SetMessageEntry interface
type MockSetMessageEntry struct {
	ctrl     *gomock.Controller
	recorder *_MockSetMessageEntryRecorder
}

// Recorder for MockSetMessageEntry (not exported)
type _MockSetMessageEntryRecorder struct {
	mock *MockSetMessageEntry
}

func NewMockSetMessageEntry(ctrl *gomock.Controller) *MockSetMessageEntry {
	mock := &MockSetMessageEntry{ctrl: ctrl}
	mock.recorder = &_MockSetMessageEntryRecorder{mock}
	return mock
}

func (_m *MockSetMessageEntry) EXPECT() *_MockSetMessageEntryRecorder {
	return _m.recorder
}

func (_m *MockSetMessageEntry) SetMessageEntry(_param0 MessageSink) {
	_m.ctrl.Call(_m, "SetMessageEntry", _param0)
}

func (_mr *_MockSetMessageEntryRecorder) SetMessageEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMessageEntry", arg0)
}

// Mock of Endpoint interface
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *_MockEndpointRecorder
}

// Recorder for MockEndpoint (not exported)
type _MockEndpointRecorder struct {
	mock *MockEndpoint
}

func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &_MockEndpointRecorder{mock}
	return mock
}

func (_m *MockEndpoint) EXPECT() *_MockEndpointRecorder {
	return _m.recorder
}

func (_m *MockEndpoint) GetPrefix() string {
	ret := _m.ctrl.Call(_m, "GetPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockEndpointRecorder) GetPrefix() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPrefix")
}

func (_m *MockEndpoint) ServeHTTP(_param0 http.ResponseWriter, _param1 *http.Request) {
	_m.ctrl.Call(_m, "ServeHTTP", _param0, _param1)
}

func (_mr *_MockEndpointRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServeHTTP", arg0, arg1)
}
